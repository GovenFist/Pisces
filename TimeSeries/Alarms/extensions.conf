; 2017-Jan  Hydromet alert extensions.conf
; Karl Tarbet
; this asterisk configuration file is stored in a linux
; asterisk server  /etc/asterisk/extensions.conf
;
; this dialplan is entered using a dialplan
;
[globals]
SIP=SIP/pn ; defined in /etc/asterisk/sip.conf

[hydromet]
exten => main,1,NoOp(begin hydromet alert call)
   same => n,Gosub(log,start,1(karl))
   same => n,DumpChan()
;   same => n, Hangup()
   same => n,Gosub(log_status,start,1(unconfirmed))
   same => n,Background(beep)
   ; press 1 to accept this call from Hydromet
   same => n,Read(ackDigit,hydromet/incoming_call&hydromet/${siteid}_site&hydromet/press1,1,,2,5)
   same => n,GotoIf($["${ackDigit}" = "1"]?ackalert:unconfirmed)

   same => n(ackalert),NoOp() ; user ask accepted the call by pressing 1
   same => n,Playback(hydromet/boise_hydromet)
   same => n,Playback(hydromet/alarm_condition)
   same => n,Gosub(log,start,1(there is an alarm condition at site ${siteid}))
   same => n,Playback(hydromet/${siteid}_site)
   same => n,Background(hydromet/hydromet_cbtt); the hydromet code for this site is
   same => n,SayAlpha(${siteid})
   same => n,Playback(hydromet/hydromet_parameter) ; the parameter is
   same => n,Playback(hydromet/${parameter}_parameter) ; Forebay
   same => n,Playback(hydromet/hydromet_pcode) ; the hydromet code for this parameter
   same => n,SayAlpha(${parameter})
   same => n,Background(hydromet/alarm_value) ; the alarm value is
   same => n,SayAlpha(${value})
   same => n,Background(hydromet/ack_responibility)
   same => n,Read(ackDigit,hydromet/press1or5,1,,2,5) ;press 1 to accept responsibility, to repeat press 5
   same => n,GotoIf($["${ackDigit}" = "5"]?ackalert)
   same => n,GotoIf($["${ackDigit}" = "1"]?confirmed)
   same => n,Goto(unconfirmed)

; --- confirmed ---
   same => n(confirmed),NoOp()
   same => n,Gosub(log_status,start,1(confirmed))
   same => n,Gosub(log,start,1(confirmed by ${phone} ))
   same => n,Playback(auth-thankyou)
   same => n,Playback(vm-goodbye)
   same => n,Hangup()

; --- unconfirmed ---
   same => n(unconfirmed),NoOp()
   same => n,Gosub(log_status,start,1(unconfirmed))

exten => i,1,Goto(confirm,alarmmsg,1)

exten => e,1,NoOp(error )

exten => h,1,NoOp(hangup extension)

[log_status]
exten => start,1,NoOp(log_status)
  same => n,Set(DB(hydromet/status)=${ARG1})
  same => n,Set(DB(hydromet/status_time)=${STRFTIME(${EPOCH},,%Y-%m-%d %H:%M:%S)} )
  same => n,Return()


[log]
 exten => start,1,NoOp(log)
  same => n,Set(sql=insert into alarm_log values('${STRFTIME(${EPOCH},,%Y-%m-%d %H:%M.%S)}','${SQL_ESC(${ARG1})}'))
  same => n,NoOp(${sql})
  same => n,Set(DB_CMD(${sql})=0)
;  same => n,Set(DB(hydromet/log_time)=${STRFTIME(${EPOCH},,%Y-%m-%d %H:%M.%S)})
  same => n,Return()


; sets global variables phoneCount, phone1,phone2,...phone${phoneCount}
[subGetPhoneNumbers]
exten => start,1,NoOp(subGetPhoneNumbers)
  same => n,Set(mySQL=select phone from alarm_recipient where list='${SQL_ESC(${ARG1})}' order by call_order)
  same => n,Set(ODBC_ID=${DB_TABLE(${mySQL})})
  same => n,NoOp(ODBC_ID=${ODBC_ID})
  same => n,NoOp(ODBCROWS=${ODBCROWS})
  same => n,Set(phoneCount=${ODBCROWS})
  same => n,GotoIf($[${ODBCROWS} < 1]?no_rows,1)
  same => n,Set(COUNTER=1)
  same => n,While($[${COUNTER} <= ${ODBCROWS}])
  same => n,Set(phone${COUNTER}=${ODBC_FETCH(${ODBC_ID})})
  same => n,Set(COUNTER=$[${COUNTER} + 1])
  same => n,EndWhile()
  same => n,ODBCFinish()
  same => n,Return()

exten => no_rows,1,Verbose(1,No phone numbers found)
  same => n,Set(phoneCount=0)
  same => n,ODBCFinish()
  same => n,Return()

