C
C     LINK MPAVG,DUA11:[RROB.JOE.util]ACFUTIL
C
C     loads DATA DIRECTLY FROM archive TO MPOLL.IND
C
C     FOR001 - MPOLL.IND
C     FOR005 - TERMINAL INPUT
C     FOR006 - TERMINAL OUTPUT
C     FOR020 - TEMAV20.DAT, input file of mpavg commands
C
	COMMON /BLK2/ NAP,IOS
	COMMON /BLK17/ UNAME,LOGMSG,CJOB
	CHARACTER CJOB*4,UNAME*12,LOGMSG*80
C
	CHARACTER*1 MARK(12),NMARK(12)
	CHARACTER*3 CMON(12),BMO20,EMO20,VALID
	CHARACTER*9 PCLT
	CHARACTER*4 CYR20,PREVYR
	CHARACTER*12 CBLT
	CHARACTER*50 T20	! LTDF PCODE, AND MPOLL PCODE IF REQUIRED
	CHARACTER*20 ST1,ST2,ST3,ST4
	CHARACTER*12 CBMP
	CHARACTER*9 PCMP
	CHARACTER*25 ADMP
	CHARACTER*27 AD_SHORT
C
	DIMENSION VAL(12,31),DATM(12),MDAYS(12)
	DIMENSION DATT(12),DATA(12)
C
C	INCLUDE 'SYS$LIBRARY:FORIOSDEF/LIST'
C
	DATA CMON /'OCT','NOV','DEC','JAN','FEB','MAR','APR','MAY',
	1'JUN','JUL','AUG','SEP'/
C
	DATA MDAYS /31,30,31,31,28,31,30,31,30,31,31,30/
C
	CALL USER	! TO RETRIEVE USER NAME
C
	NOVAL=998877.
	LOGMSG=' '
C
	IN1=1
	IT=5
	IOT=6
	IN20=20
C
	OPEN(UNIT=1,FILE='HYDROMET:[MPOLL]MPOLL.IND',STATUS='OLD',
C	OPEN(UNIT=1,FILE='DRA1:[RROB.JOE.SHEF]MPOLL.IND',STATUS='OLD',
	1ORGANIZATION='INDEXED',ACCESS='KEYED',RECORDTYPE='FIXED'
	2,SHARED
	3 ,FORM='UNFORMATTED',RECL=22,KEY=(1:25:CHARACTER)
	4 ,IOSTAT=IOS,ERR=9999)
C
	CALL JOBNUM
C	LOGMSG='%MPAVG-MPOLL.IND opened'	! DON'T WRITE
C	CALL LOGWRITE				! DON'T WRITE
C
50	DO 200 M=1,12
	NMARK(M)=' '
	DATM(M)=NOVAL
	DATA(M)=NOVAL
200	CONTINUE
	VALZERO=NOVAL
C
	READ(20,2,END=20,ERR=9992,IOSTAT=IOS) CYR20,BMO20,EMO20,T20
2	FORMAT(8X,A4,2(1X,A3),1X,A50)	! $ MPAVG 1985 OCT SEP AND QD[ AND OM]
C
C	PARSE STRING OF LT CBTT, LT PCODE, MPOLL CBTT, MPOLL PCODE
C
	DO 60 I=1,50
	IF(T20(I:I).EQ.' ') T20(I:I)=','
	IF(T20(I:I).EQ.'"') T20(I:I)=','	! PASSED FROM .COM IF P6 BLANK
60	CONTINUE
C
	ST1=' '
	ST2=' '
	ST3=' '
	ST4=' '
C
	NUMST=1	! COUNT OF NON-ZERO LENGTHS, TAKES CARE OF INITIAL BLANK
	IPOS=0
	DO 212 I=1,5
	IF(IPOS.GE.45) GO TO 213	! 12 + 1 + 9 + 1 + 12 + 1 + 9
	IBEG=IPOS+1
	IPOS=INDEX(T20(IBEG:),',')+IBEG-1
	LEN=IPOS-IBEG
	IF(LEN.LE.0) GO TO 212
	IF(NUMST.EQ.1) THEN
		ST1=T20(IBEG:IPOS-1)
	ELSE IF(NUMST.EQ.2) THEN
		ST2=T20(IBEG:IPOS-1)
	ELSE IF(NUMST.EQ.3) THEN
		ST3=T20(IBEG:IPOS-1)
	ELSE IF(NUMST.EQ.4) THEN
		ST4=T20(IBEG:IPOS-1)
	ELSE IF(NUMST.EQ.5) THEN
		GO TO 213
	END IF
	NUMST=NUMST+1
212	CONTINUE
C
213	CBLT=ST1	! LTDF CBTT
	PCLT=ST2	! LTDF PCODE
	CBMP=ST3	! LOADED TO DIFFERENT CBTT NAME IN MPOLL
	PCMP=ST4	! LOADED TO DIFFERENT PCODE IN MPOLL
C
	DECODE(4,1,CYR20) IYR20
1	FORMAT(I4)
	MDAYS(5)=28
	LPYR=IYR20/4.0
	IF((LPYR*4).EQ.IYR20) MDAYS(5)=29
	LASTYR=IYR20-1
	ENCODE(4,1,PREVYR) LASTYR
C
	MB=0
	ME=0
	DO 210 M=1,12
	IF(BMO20.EQ.CMON(M)) MB=M
	IF(EMO20.EQ.CMON(M)) ME=M
210	CONTINUE
	IF((MB.EQ.0).OR.(ME.EQ.0).OR.(MB.GT.ME)) GO TO 9994
C
	IF((PCLT.EQ.'PC       ').OR.(PCLT.EQ.'PA       ')) THEN	! NEED LAST VALUE OF PREVIOUS YEAR
		IOS=0
		CALL GETACFREC(*50,IOS,CBLT,PCLT,PREVYR,VAL)	! *50 open/close error
		IF(IOS.EQ.36) THEN
			VALZERO=998877.
			GO TO 360
		END IF
		IF(IOS.NE.0) GO TO 50
		VALZERO=VAL(12,30)	! SEPTEMBER 30
	ELSE IF(PCLT.EQ.'PU       ') THEN
		VALZERO=0.	! use zero for last value of previous year
	END IF
C
360	IOS=0
	CALL GETACFREC(*50,IOS,CBLT,PCLT,CYR20,VAL)
	IF(IOS.NE.0) GO TO 50	! archive read error, read next input line
C
350	ADMP=' '
	ADMP(1:12)=CBLT
	IF(CBMP.NE.'            ') ADMP(1:12)=CBMP
	ADMP(22:25)=CYR20
C
	CONST=1.
	IF(PCLT.EQ.'PP       ') THEN
		IF((PCMP.EQ.'         ').OR.(PCMP.EQ.'PP       ')) THEN
			ADMP(13:21)='PP       '
		ELSE IF(PCMP.EQ.'PM       ') THEN
			ADMP(13:21)='PM       '
		ELSE
			GO TO 9995
		END IF
		CALL TOTAL(VAL,DATM,MDAYS,CONST)
	ELSE IF((PCLT.EQ.'PC       ').OR.(PCLT.EQ.'PA       ')
	1.OR.(PCLT.EQ.'PU       ')) THEN
		IF((PCMP.EQ.'         ').OR.(PCMP.EQ.'PP       ')) THEN
			ADMP(13:21)='PP       '
		ELSE IF(PCMP.EQ.'PM       ') THEN
			ADMP(13:21)='PM       '
		ELSE
			GO TO 9995
		END IF
		CALL CHANGE(VAL,DATM,MDAYS,CONST,VALZERO)
	ELSE IF(PCLT.EQ.'QD       ') THEN
		IF((PCMP.EQ.'         ').OR.(PCMP.EQ.'QM       ')) THEN
			ADMP(13:21)='QM       '	! QM
			CONST=1.98347/1000.	! CONVERT CFS-DAYS TO 1000 AF
			CALL TOTAL(VAL,DATM,MDAYS,CONST)
		ELSE IF(PCMP.EQ.'OM       ') THEN
			ADMP(13:21)='OM       '	! OM
			CONST=1.98347/1000.
			CALL TOTAL(VAL,DATM,MDAYS,CONST)
		ELSE IF(PCMP.EQ.'CM       ') THEN
			ADMP(13:21)='CM       '	! CM
			CALL MEAN(VAL,DATM,MDAYS,CONST)
		ELSE
			GO TO 9995
		END IF
	ELSE IF(PCLT.EQ.'QT       ') THEN
		IF((PCMP.EQ.'         ').OR.(PCMP.EQ.'OM       ')) THEN
			ADMP(13:21)='OM       '	! OM
			CONST=1.98347/1000.
			CALL TOTAL(VAL,DATM,MDAYS,CONST)
		ELSE
			GO TO 9995
		END IF
	ELSE IF(PCLT.EQ.'ID       ') THEN
		IF((PCMP.EQ.'         ').OR.(PCMP.EQ.'IM       ')) THEN
			ADMP(13:21)='IM       '	! IM
			CONST=1.98347/1000.
			CALL TOTAL(VAL,DATM,MDAYS,CONST)
		ELSE
			GO TO 9995
		END IF
	ELSE IF(PCLT.EQ.'FB       ') THEN
		IF((PCMP.EQ.'         ').OR.(PCMP.EQ.'FB       ')) THEN
			ADMP(13:21)='FB       '	! FB
			CALL EOM(VAL,DATM,MDAYS,CONST)
		ELSE
			GO TO 9995
		END IF
	ELSE IF(PCLT.EQ.'AF       ') THEN
		IF((PCMP.EQ.'         ').OR.(PCMP.EQ.'AF       ')) THEN
			ADMP(13:21)='AF       '	! AF
			CONST=.001
			CALL EOM(VAL,DATM,MDAYS,CONST)
		ELSE IF(PCMP.EQ.'AFM      ') THEN
			ADMP(13:21)='AFM      '	! AFM
			CONST=.001
			CALL MIDMON(VAL,DATM,MDAYS,CONST)
		ELSE
			GO TO 9995
		END IF
	ELSE IF((PCLT.EQ.'PX       ').OR.(PCLT.EQ.'PZ       ')) THEN
		IF((PCMP.EQ.'         ').OR.(PCMP.EQ.'PM       ')) THEN
			ADMP(13:21)='PM       '	! PM
			CALL TOTAL(VAL,DATM,MDAYS,CONST)
		ELSE
			GO TO 9995
		END IF
	ELSE IF(PCLT.EQ.'QU       ') THEN
		IF((PCMP.EQ.'         ').OR.(PCMP.EQ.'QU       ')) THEN
			ADMP(13:21)='QU       '	! QU
		ELSE IF(PCMP.EQ.'IM       ') THEN
			ADMP(13:21)='IM       '	! IM
		ELSE
			GO TO 9995
		END IF
		CONST=1.98347/1000.
		CALL TOTAL(VAL,DATM,MDAYS,CONST)
	ELSE IF(PCLT.EQ.'QJ       ') THEN
		IF((PCMP.EQ.'         ').OR.(PCMP.EQ.'QC       ')) THEN
			ADMP(13:21)='QC       '	! QC
			CONST=1.98347/1000.
			CALL TOTAL(VAL,DATM,MDAYS,CONST)
		ELSE
			GO TO 9995
		END IF
	ELSE IF(PCLT.EQ.'MX       ') THEN
		IF((PCMP.EQ.'         ').OR.(PCMP.EQ.'MX       ')) THEN
			ADMP(13:21)='MX       '	! MX
			CALL VMAX(VAL,DATM,MDAYS,CONST)
		ELSE
			GO TO 9995
		END IF
	ELSE IF(PCLT.EQ.'MN       ') THEN
		IF((PCMP.EQ.'         ').OR.(PCMP.EQ.'MN       ')) THEN
			ADMP(13:21)='MN       '	! MN
			CALL VMIN(VAL,DATM,MDAYS,CONST)
		ELSE
			GO TO 9995
		END IF
	ELSE IF(PCLT.EQ.'MM       ') THEN
		IF((PCMP.EQ.'         ').OR.(PCMP.EQ.'MM       ')) THEN
			ADMP(13:21)='MM       '	! MM
			CALL MEAN(VAL,DATM,MDAYS,CONST)
		ELSE
			GO TO 9995
		END IF
	ELSE IF(PCLT.EQ.'SE       ') THEN
		IF((PCMP.EQ.'         ').OR.(PCMP.EQ.'SE       ')) THEN
			ADMP(13:21)='SE       '	! SE
			CALL FOM(VAL,DATM,MDAYS,CONST)
                ELSE IF(PCMP.EQ.'SP       ') THEN
                        ADMP(13:21)='SP       '
                        CALL FOM(VAL,DATM,MDAYS,CONST)
		ELSE IF(PCMP.EQ.'SEM      ') THEN
			ADMP(13:21)='SEM      '	! SEM
			CALL MIDMON(VAL,DATM,MDAYS,CONST)
                ELSE IF(PCMP.EQ.'SPM      ') THEN
                        ADMP(13:21)='SPM      '
                        CALL MIDMON(VAL,DATM,MDAYS,CONST)
		ELSE
			GO TO 9995
		END IF
	ELSE IF(PCLT.EQ.'SP       ') THEN
		IF((PCMP.EQ.'         ').OR.(PCMP.EQ.'SP       ')) THEN
			ADMP(13:21)='SP       '	! SP
			CALL FOM(VAL,DATM,MDAYS,CONST)
		ELSE IF(PCMP.EQ.'SPM      ') THEN
			ADMP(13:21)='SPM      '	! SPM
			CALL MIDMON(VAL,DATM,MDAYS,CONST)
		ELSE IF(PCMP.EQ.'SE       ') THEN		! JDoty 12/18/92
			ADMP(13:21)='SE       '	! SE
			CALL FOM(VAL,DATM,MDAYS,CONST)
		ELSE IF(PCMP.EQ.'SEM      ') THEN		! JDoty 12/18/92
			ADMP(13:21)='SEM      '	! SEM
			CALL MIDMON(VAL,DATM,MDAYS,CONST)
		ELSE
			GO TO 9995
		END IF
	ELSE IF(PCLT.EQ.'SS       ') THEN
		IF((PCMP.EQ.'         ').OR.(PCMP.EQ.'SS       ')) THEN
			ADMP(13:21)='SS       '	! SS
			CALL FOM(VAL,DATM,MDAYS,CONST)
		ELSE IF(PCMP.EQ.'SSM      ') THEN
			ADMP(13:21)='SSM      '	! SSM
			CALL MIDMON(VAL,DATM,MDAYS,CONST)
		ELSE
			GO TO 9995
		END IF
	ELSE
		GO TO 9998
	END IF
C
	IF(ADMP(1:12).EQ.'            ') GO TO 9997
	IF(ADMP(13:21).EQ.'         ') GO TO 9997
C
	CALL SHORT(ADMP,AD_SHORT,L_S)
C
	NAP=0
542	READ(UNIT=1,KEY=ADMP,KEYID=0,IOSTAT=IOS,ERR=541) ADMP,DATT,MARK
	UNLOCK 1
	GO TO 543
541	CALL RECLOCK(*9996,*542,*505)
543	CONTINUE
C
C	CHANGE OLD RECORD
C
	DO 545 M=1,12
	NMARK(M)=MARK(M)	! SET NEW RECORD EQUAL TO OLD RECORD
	DATA(M)=DATT(M)
545	CONTINUE
	DO 550 M=MB,ME
	IF(DATM(M).NE.NOVAL) THEN
		CALL MARKCHECK(MARK(M),VALID)
		IF(VALID.EQ.'PER') GO TO 550	!	PERMANENT MARK
		NMARK(M)='V'
		DATA(M)=DATM(M)
	END IF
550	CONTINUE
C
	DO 580 M=MB,ME
	LOGMSG='%MPAVG-'//AD_SHORT(1:L_S)//' '//CMON(M)
	1//':ND,OR,NR:'
	ENCODE(30,16,LOGMSG(L_S+22:L_S+51),ERR=580)
	1DATM(M),DATT(M),MARK(M),DATA(M)
	1,NMARK(M)
16	FORMAT(F9.2,1X,2(F9.2,A1))
	WRITE(6,13) LOGMSG(1:79)
13	FORMAT(1X,A79)
	CALL LOGWRITE
580	CONTINUE
C
	NAP=0
552	READ(UNIT=1,KEY=ADMP,KEYID=0,IOSTAT=IOS,ERR=551)ADMP,DATT,MARK
	GO TO 553
551	CALL RECLOCK(*9996,*552,*9996)
553	CONTINUE
C
	REWRITE(1,IOSTAT=IOS,ERR=9991) ADMP,(DATA(I),I=1,12),NMARK
	UNLOCK 1
C
	GO TO 50	! TO READ NEXT INPUT LINE
C
C	ADD NEW RECORD
C
505	IF(IOS.NE.36) GO TO 9996
C
	DO 510 M=MB,ME
	IF(DATM(M).NE.NOVAL) THEN
		NMARK(M)='V'
		DATA(M)=DATM(M)
	END IF
510	CONTINUE
C
      WRITE(1,IOSTAT=IOS,ERR=9990) ADMP,(DATA(I),I=1,12),NMARK
      UNLOCK 1
C
      IF(MB.EQ.ME) THEN
           LOGMSG='%MPAVG-Added '//AD_SHORT(1:L_S)//' '//CMON(MB)
           ENCODE(10,15,LOGMSG(L_S+18:L_S+27),ERR=590) DATA(MB),
     1 NMARK(MB)
15         FORMAT(F9.2,A1)
           GO TO 600
      END IF
C
590   LOGMSG='%MPAVG-Added '//AD_SHORT(1:L_S)//' '//
     1 CMON(MB)//'-'//CMON(ME)
C
600   WRITE(6,13) LOGMSG(1:79)
      CALL LOGWRITE
C
C
      GO TO 50	! TO READ NEXT INPUT LINE
C
CXXXXXXXXXXXXXXXXXXXXXXXXXXX
C	ERROR MESSAGES
CXXXXXXXXXXXXXXXXXXXXXXXXXXX
C
9990	WRITE(6,90) IOS,AD_SHORT(1:L_S)
90	FORMAT(' %MPAVG-Error on write to MPOLL, IOS=',I2,', ADMP=',A)
	GO TO 50
C
9991	WRITE(6,91) IOS,AD_SHORT(1:L_S)
91	FORMAT(' %MPAVG-Error on rewrite to MPOLL, IOS=',I2,',ADMP=',A)
	GO TO 50
C
9992	WRITE(6,92) IOS
92	FORMAT(' %MPAVG-Error on file 20 read, IOS=',I2)
	GO TO 50
C
9994	WRITE(6,94)
94	FORMAT(' %MPAVG-Bad month specified, or months out of order')
	GO TO 50
C
9995	WRITE(6,95) PCMP
95	FORMAT(//' %MPAVG-Error on parameter code, PCMP=',A)
	CALL HELP
	GO TO 50
C
9996	WRITE(6,96) IOS,AD_SHORT(1:L_S)
96	FORMAT(' %MPAVG-Error on read from MPOLL, IOS=',I2,', ADMP=',A)
	GO TO 50
C
9997	WRITE(6,97)
97	FORMAT(' %MPAVG-No MPOLL station name and/or pcode')
	GO TO 50
C
9998	WRITE(6,98) PCLT
98	FORMAT(' %MPAVG-Archive parameter code not recognized, ',
	1'PCLT=',A)
	CALL HELP
	GO TO 50
C
9999	WRITE(6,99) IOS
99	FORMAT(' %MPAVG-Error on Unit 1 file open, IOS=',I2)
	LOGMSG='%MPAVG-Error on open, no input file opened'
	CALL LOGWRITE
	GO TO 20
C
20	CLOSE(UNIT=1,ERR=9993,IOSTAT=IOS)
C	LOGMSG='%MPAVG-MPOLL.IND closed'	! DON'T WRITE
C	CALL LOGWRITE				! DON'T WRITE
	GO TO 30
9993	WRITE(6,93) IOS
93	FORMAT(' %MPAVG-Error on Unit 1 close, IOS=',I2)
	LOGMSG='%MPAVG-Error on MPOLL.IND close'
	CALL LOGWRITE
C
30    CALL CLOSEACF(IOS,11,CYR20)	! try to close last year used
C
100	CALL EXIT
	END
C
C**********************************************************************
C
	SUBROUTINE TOTAL(VAL,DATM,MDAYS,CONST)
C
C	ACCUMULATES MONTHLY TOTALS * C0NST
C
	DIMENSION VAL(12,31),DATM(12),MDAYS(12)
C
	NOVAL=998877.
C
350	DO 400 M=1,12
	DO 375 I=1,MDAYS(M)
	IF(VAL(M,I).EQ.NOVAL) THEN
		DATM(M)=NOVAL
		GO TO 400
	END IF
	IF(DATM(M).EQ.NOVAL) THEN
		DATM(M)=VAL(M,I)
	ELSE
		DATM(M)=DATM(M)+VAL(M,I)
	END IF
375	CONTINUE
400	CONTINUE
C
	DO 500 M=1,12
	IF(DATM(M).NE.NOVAL) DATM(M)=DATM(M)*CONST
500	CONTINUE
C
C	WRITE(6,99) DATM
99	FORMAT(1X,12F9.3)
C
	RETURN
	END
C
C**********
C
	SUBROUTINE EOM(VAL,DATM,MDAYS,CONST)
C
C	SAVES END OF MONTH VALUE * CONSTANT
C
	DIMENSION VAL(12,31),DATM(12),MDAYS(12)
C
	NOVAL=998877.
C
350	DO 400 M=1,12
	IF(VAL(M,MDAYS(M)).NE.NOVAL) DATM(M)=VAL(M,MDAYS(M))*CONST
400	CONTINUE
C
	RETURN
	END
C
C**********
C
	SUBROUTINE CHANGE(VAL,DATM,MDAYS,CONST,VALZERO)
C
C	SAVES MONTHLY CHANGE * CONSTANT
C
	DIMENSION VAL(12,31),DATM(12),MDAYS(12)
C
	NOV=998877.
C
	IF((VALZERO.NE.NOV).AND.(VAL(1,31).NE.NOV)) THEN
		DATM(1)=(VAL(1,31)-VALZERO)*CONST
	END IF
C
	DO 400 M=2,12
	IF((VAL(M,MDAYS(M)).NE.NOV).AND.(VAL((M-1),MDAYS(M-1)).NE.NOV)) THEN
		DATM(M)=(VAL(M,MDAYS(M))-VAL((M-1),MDAYS(M-1)))*CONST
	END IF
400	CONTINUE
C
	RETURN
	END
C
C**********
C
	SUBROUTINE MEAN(VAL,DATM,MDAYS,CONST)
C
C	FINDS AVERAGE OF DAILY VALUES * CONSTANT
C
	DIMENSION VAL(12,31),DATM(12),MDAYS(12)
C
	NOVAL=998877.
C
350	DO 400 M=1,12
	DO 375 I=1,MDAYS(M)
C
	IF(VAL(M,I).EQ.NOVAL) THEN
		DATM(M)=NOVAL
		GO TO 400
	END IF
	IF(DATM(M).EQ.NOVAL) THEN
		DATM(M)=VAL(M,I)
	ELSE
		DATM(M)=DATM(M)+VAL(M,I)
	END IF
375	CONTINUE
400	CONTINUE
C
	DO 500 M=1,12
	IF(DATM(M).NE.NOVAL) DATM(M)=(DATM(M)/MDAYS(M))*CONST
500	CONTINUE
C
	RETURN
	END
C
C**********
C
	SUBROUTINE VMAX(VAL,DATM,MDAYS,CONST)
C
C	FINDS MAX FOR MONTH * CONSTANT
C
	DIMENSION VAL(12,31),DATM(12),MDAYS(12)
C
	NOVAL=998877.
C
	DO 200 M=1,12
	DO 150 I=1,MDAYS(M)
	IF(VAL(M,I).NE.NOVAL) THEN
		DATM(M)=VAL(M,I)
		GO TO 200
	END IF
150	CONTINUE
200	CONTINUE
C
350	DO 400 M=1,12
	IF(DATM(M).EQ.NOVAL) GO TO 400
	DO 375 I=1,MDAYS(M)
	IF(VAL(M,I).NE.NOVAL) THEN
		IF(VAL(M,I).GT.DATM(M)) THEN
			DATM(M)=VAL(M,I)
		END IF
	END IF
375	CONTINUE
400	CONTINUE
C
	DO 500 M=1,12
	IF(DATM(M).NE.NOVAL) DATM(M)=DATM(M)*CONST
500	CONTINUE
C
	RETURN
	END
C
C**********
C
	SUBROUTINE VMIN(VAL,DATM,MDAYS,CONST)
C
C	FINDS MIN FOR MONTH * CONSTANT
C
	DIMENSION VAL(12,31),DATM(12),MDAYS(12)
C
	NOVAL=998877.
C
	DO 200 M=1,12
	DO 150 I=1,MDAYS(M)
	IF(VAL(M,I).NE.NOVAL) THEN
		DATM(M)=VAL(M,I)
		GO TO 200
	END IF
150	CONTINUE
200	CONTINUE
C
350	DO 400 M=1,12
	IF(DATM(M).EQ.NOVAL) GO TO 400
	DO 375 I=1,MDAYS(M)
	IF(VAL(M,I).NE.NOVAL) THEN
		IF(VAL(M,I).LT.DATM(M)) THEN
			DATM(M)=VAL(M,I)
		END IF
	END IF
375	CONTINUE
400	CONTINUE
C
	DO 500 M=1,12
	IF(DATM(M).NE.NOVAL) DATM(M)=DATM(M)*CONST
500	CONTINUE
C
	RETURN
	END
C
C**********
C
	SUBROUTINE FOM(VAL,DATM,MDAYS,CONST)
C
C	SAVES FIRST OF MONTH VALUE * CONSTANT
C
	DIMENSION VAL(12,31),DATM(12),MDAYS(12)
C
	NOVAL=998877.
C
350	DO 400 M=1,12
	IF(VAL(M,1).NE.NOVAL) DATM(M)=VAL(M,1)*CONST
400	CONTINUE
C
	RETURN
	END
C
C**********
C
	SUBROUTINE MIDMON(VAL,DATM,MDAYS,CONST)
C
C	SAVES 15TH OF MONTH VALUE * CONSTANT
C
	DIMENSION VAL(12,31),DATM(12),MDAYS(12)
C
	NOVAL=998877.
C
350	DO 400 M=1,12
	IF(VAL(M,15).NE.NOVAL) DATM(M)=VAL(M,15)*CONST
400	CONTINUE
C
	RETURN
	END
C
C
C     ---------------------------------
      SUBROUTINE MARKCHECK(TMARK,VALID)
C
	PARAMETER IP=8
C
	CHARACTER*1 TMARK,PMARK(IP)
	CHARACTER*3 VALID
C
	DATA PMARK /'D','F','G','L','P','S','W','Y'/
C
	VALID='NO '
200	DO 300 I=1,IP
	IF(TMARK.EQ.PMARK(I)) THEN
		VALID='PER'	! PERMANENT MARK, DO NOT CHANGE DATA
		GO TO 500
	END IF
300	CONTINUE
C
500	RETURN
	END
C
C**********
C
	SUBROUTINE USER
C
C	THIS SUBROUTINE WILL OBTAIN THE USERNAME THAT ACCESSED MPOLL
C
	COMMON /BLK17/ UNAME,LOGMSG,CJOB
C
	INCLUDE '($SSDEF)'
	INCLUDE '($JPIDEF)'
C
	INTEGER*4 SYS$GETJPI
C
	CHARACTER*4 CJOB
	CHARACTER*12 UNAME
	CHARACTER*80 LOGMSG
C
	INTEGER*2 BUFFER(8)
	INTEGER*4 BUFFER_L(4)
	EQUIVALENCE(BUFFER,BUFFER_L)
C
	BUFFER(1)=12
	BUFFER(2)=JPI$_USERNAME
	BUFFER_L(2)=%LOC(UNAME)
	BUFFER_L(3)=0
	BUFFER_L(4)=0	! SIGNAL TO END
C
	ISTATUS=SYS$GETJPI(,,,BUFFER,,,)
	IF(ISTATUS.NE.SS$_NORMAL) THEN
C
		LOGMSG='%USER-Error in getting username, Status = '
		ENCODE(3,1,LOGMSG(44:46)) ISTATUS
1		FORMAT(I3)
		CALL LOGWRITE
C
	END IF
C
	RETURN
	END
C
CXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
C
	SUBROUTINE HELP
C
CXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
C
	WRITE(6,1)
1	FORMAT
	1('            MPOLL PCODE'
	2/' LTFP    ================='
	2/' PCODE   DEFAULT  OPTIONAL         LTFP DATA PROCESS'
	4/' =====   =======  ========     ========================='
	3/' PP        PM        PP        TOTAL OF DAILY VALUES'
	4/' PC        PM        PP        MONTHLY CHANGE'
	5/' QD        QM        OM        TOTAL IN 1000 ACRE-FEET'
	6/' QT        OM                  TOTAL IN 1000 ACRE-FEET'
	7/' ID        OM                  TOTAL IN 1000 ACRE-FEET'
	8/' FB        FB                  END OF MONTH'
	9/' AF        AF        AFM       END OF MONTH, MID_MONTH'
	2/' PX        PM                  TOTAL OF DAILY VALUES'
	3/' PZ        PM                  TOTAL OF DAILY VALUES'
	4/' QU        QU        IM        TOTAL IN 1000 ACRE-FEET'
	5/' QJ        QC                  TOTAL IN 1000 ACRE-FEET'
	6/' MX        MX                  MAXIMUM FOR MONTH'
	7/' MN        MN                  MINIMUM FOR MONTH'
	8/' MM        MM                  MONTHLY MEAN'
	9/' SE        SP        SPM       FIRST OF MONTH, MID-MONTH'
	2/' SP        SP        SPM       FIRST OF MONTH, MID-MONTH'
	4/' SS        SP        SPM       FIRST OF MONTH, MID-MONTH')
C
	RETURN
	END
C
CXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
C
	SUBROUTINE RECLOCK(*,*,*)
C
CXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
C
C	WAITS ONE SECOND BEFORE RETURNING IF RECORD LOCKED
C
C	RETURN 1 - STILL LOCKED ON 5TH READ ATTEMPT
C	RETURN 2 - TRY READ AGAIN
C	RETURN 3 - OTHER ERROR
C
	COMMON /BLK2/ IOT,IO2,IFIN,NYRS(13),NYRSB(13),IT,NAP,IOS,IO3,IN4
	COMMON /BLK17/ UNAME,LOGMSG,CJOB
C
	LOGICAL*1 BTIME(8)
C
	CHARACTER ATIM*13
C
	CHARACTER*4 CJOB
	CHARACTER*12 UNAME
	CHARACTER*80 LOGMSG
C
	DATA ATIM/'0 00:00:01.00'/
C
	IF(IOS.NE.52) RETURN 3	! NOT LOCKED RECORD ERROR
C
C
	LOGMSG='%RECLOCK-Record locked, pass='
	ENCODE(1,3,LOGMSG(33:33)) NAP
3	FORMAT(I1)
	CALL LOGWRITE
C
	ISTAT=SYS$BINTIM(ATIM,BTIM)	! GET BINARY PAUSE
	RETVAR=SYS$SCHDWK(,,BTIM,)
	RETVAR=SYS$HIBER()	! FALL ASLEEP FOR 1 SECOND
	NAP=NAP+1
	IF(NAP.LT.5) RETURN 2	! TO TRY READ AGAIN
	WRITE(IOT,1) IOS
1	FORMAT(1X,'Error on read, IOS=',I2)
C
	LOGMSG='%RECLOCK-Record locked on last attempt to read'
	CALL LOGWRITE
C
	NAP=0
	RETURN 1	! RECORD STILL LOCKED AFTER 5TH ATTEMPT
	END
C
CXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
C
	SUBROUTINE LOGWRITE
C
CXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
C
C	SUBROUTINE TO WRITE MESSAGES TO LOGGER
C
	COMMON /BLK17/ UNAME,LOGMSG,CJOB
C
	CHARACTER*4 CJOB
	CHARACTER*8 CTIME
	CHARACTER*9 CDATE
	CHARACTER*12 UNAME
	CHARACTER*80 LOGMSG
C
	IO8=8
C
	L_M=1
	DO 100 I=80,1,-1
	IF(LOGMSG(I:I).NE.' ') THEN
		L_M=I
		GO TO 110
	END IF
100	CONTINUE
C
110	L_U=1
	DO 500 I=12,1,-1
	IF(UNAME(I:I).NE.' ') THEN
		L_U=I
		GO TO 200
	END IF
500	CONTINUE
C
200	CALL TIME(CTIME)
	CALL DATE(CDATE)
C
	OPEN(UNIT=8,NAME='HYDROMET:[MPOLL]MPOLL.LOG',TYPE='UNKNOWN'
C	OPEN(UNIT=8,NAME='DRA1:[RROB.JOE.SHEF]SHEF.LOG',TYPE='UNKNOWN'
	1,RECORDSIZE=132,FORM='FORMATTED',CARRIAGECONTROL='LIST'
	2,SHARED,ACCESS='APPEND',IOSTAT=IOS,ERR=9999)
C
	WRITE(IO8,1,ERR=350) CDATE,CTIME,CJOB,UNAME(1:L_U),LOGMSG(1:L_M)
1	FORMAT(1X,A9,1X,A8,', ',A4,'-',A<L_U>,', ',A<L_M>)
C
350	CLOSE(UNIT=8,ERR=9998)
C
	GO TO 1000
9999	WRITE(6,2) IOS
2	FORMAT('Error on logger file open, IOS=',I3)
C
	GO TO 1000
C
9998	WRITE(6,3) IOS
3	FORMAT('Error on logger file close, IOS=',I3)
C
1000	LOGMSG=' '
C
	RETURN
	END
C
CXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
C
	SUBROUTINE JOBNUM
C
CXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
C
C	RETRIEVES USER NUMBER FROM RECORD 'ZZZZZZZZZZZZZZZZZZZZZ9999'
C
	COMMON /BLK2/ IOT,IO2,IFIN,NYRS(13),NYRSB(13),IT,NAP,IOS,IO3,IN4
	COMMON/BLK17/ UNAME,LOGMSG,CJOB
C
	DIMENSION REC_DATA(12),REC_MARK(12)
C
	CHARACTER*4 CJOB
	CHARACTER*25 REC_AD
	CHARACTER*12 UNAME
	CHARACTER*80 LOGMSG
	CHARACTER*1 REC_MARK
C
	CJOB=' '
C
	REC_AD='ZZZZZZZZZZZZZZZZZZZZZ9999'
C
232	READ(UNIT=1,KEY=REC_AD,KEYID=0,IOSTAT=IOS,ERR=231)
	1REC_AD,REC_DATA,REC_MARK
	GO TO 233
231	CALL RECLOCK(*180,*232,*234)
C
234	IF(IOS.EQ.36) THEN	! RECORD NOT FOUND
		DO 200 M=1,12
		REC_DATA(M)=998877.
		REC_MARK(M)='F'
200		CONTINUE
		REC_DATA(1)=0.
		WRITE(UNIT=1,IOSTAT=IOS,ERR=9999) REC_AD,REC_DATA,REC_MARK
		UNLOCK 1
		NAP=0
		GO TO 232
	END IF
C
233	NAP=0
C
	IF(REC_DATA(1).GT.9999.) REC_DATA(1)=0.
	JOB=REC_DATA(1)+1.
C
	REC_DATA(1)=JOB
	REWRITE(UNIT=1,IOSTAT=IOS,ERR=9999) REC_AD,REC_DATA,REC_MARK
	UNLOCK 1
C
	ENCODE(4,26,CJOB,ERR=180) JOB
26	FORMAT(I4)
	IF(CJOB(1:1).EQ.' ') CJOB(1:1)='0'
	IF(CJOB(2:2).EQ.' ') CJOB(2:2)='0'
	IF(CJOB(3:3).EQ.' ') CJOB(3:3)='0'
	GO TO 1000
C
9999	WRITE(IOT,99) IOS
99	FORMAT(' Error on write or rewrite, IOS=',I3)
C
180	CJOB=' '
C
1000	RETURN
	END
C
CXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
C
	SUBROUTINE SHORT(AD,AD_SHORT,L_SHORT)
C
CXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
C
	CHARACTER*25 AD
	CHARACTER*27 AD_SHORT
C
	AD_SHORT=' '
	L_SHORT=0
	L_STA=0
	L_PC=0
C
	DO 200 I=12,1,-1
	IF(AD(I:I).NE.' ') THEN
		L_STA=I
		GO TO 300
	END IF
200	CONTINUE
C
300	DO 400 I=21,13,-1
	IF(AD(I:I).NE.' ') THEN
		L_PC=I-13+1
		GO TO 500
	END IF
400	CONTINUE
C
500	IF((L_STA.EQ.0).OR.(L_PC.EQ.0)) THEN
		AD_SHORT=AD
		L_SHORT=25
	ELSE
		L_SHORT=L_STA+L_PC+6
		AD_SHORT=AD(1:L_STA)//' '//AD(13:L_PC+12)//' '//AD(22:25)
	END IF
C
	RETURN
	END
